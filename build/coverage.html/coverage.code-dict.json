{"/home/travis/build/npmtest/node-npmtest-htmllint/test.js":"/* istanbul instrument in package npmtest_htmllint */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-htmllint/lib.npmtest_htmllint.js":"/* istanbul instrument in package npmtest_htmllint */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_htmllint = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_htmllint = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-htmllint/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-htmllint && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_htmllint */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_htmllint\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_htmllint.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_htmllint.rollup.js'] =\n            local.assetsDict['/assets.npmtest_htmllint.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_htmllint.__dirname + '/lib.npmtest_htmllint.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-htmllint/node_modules/htmllint/lib/index.js":"var lodash = require('lodash'),\n    Linter = require('./linter');\n\n/**\n * The htmllint namespace.\n * @namespace\n */\nvar htmllint = function () {\n    var linter = htmllint.defaultLinter;\n\n    return linter.lint.apply(linter, arguments);\n};\n\nmodule.exports = htmllint;\n\nhtmllint.Linter = Linter;\nhtmllint.rules = require('./rules');\nhtmllint.messages = require('./messages');\nhtmllint.defaultLinter = new Linter(htmllint.rules);\n\nhtmllint.use = function (plugins) {\n    plugins.forEach(function (plugin) {\n        if (lodash.isString(plugin)) {\n            plugin = require(plugin);\n        }\n\n        htmllint.defaultLinter.use(plugin);\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-htmllint/node_modules/htmllint/lib/linter.js":"var Promise = require('promise');\nvar lodash = require('lodash'),\n    Parser = require('./parser'),\n    knife = require('./knife'),\n    presets = require('./presets'),\n    RuleList = require('./rule_list'),\n    InlineConfig = require('./inline_config');\n\n/**\n * A linter is configured with a set of rules that are fed the raw\n * html and ast nodes.\n * @constructor\n */\nvar Linter = function (rules) {\n    this.rules = RuleList.fromRuleMap(rules);\n    this.parser = new Parser();\n    this.inlineConfig = new InlineConfig();\n};\nmodule.exports = Linter;\n\n/**\n * Adds a plugin to the linter.\n * @param {Object} plugin - the plugin to add to the linter.\n */\nLinter.prototype.use = function (plugin) {\n    if (plugin.rules) {\n        plugin.rules.forEach(function (rule) {\n            this.rules.addRule(rule);\n        }.bind(this));\n    }\n};\n\n/**\n * Lints the HTML with the options supplied in the environments setup.\n * @param {String} html - the html as a string to lint.\n */\nLinter.prototype.lint = function (html) {\n    var opts = Linter.getOptions(arguments),\n        lines = knife.shred(html),\n        dom = this.parser.parse(html),\n        issues = null,\n        maxerr = (!opts.maxerr && opts.maxerr !== 0 ? Infinity : opts.maxerr);\n\n    this.setupSubscriptions();\n\n    this.setupInlineConfigs(dom);\n\n    issues = this.lintByLine(lines, opts);\n    issues = issues.concat(this.lintDom(dom, opts));\n\n    issues = issues.concat(this.resetRules(opts));\n    this.inlineConfig.clear();\n\n    if (maxerr >= 0) {\n        issues = lodash.take(issues, maxerr);\n    }\n\n    return Promise.all(issues)\n        .then(function (resolved) {\n            return lodash.flattenDeep(resolved);\n        });\n};\nLinter.prototype.lint = Promise.nodeify(Linter.prototype.lint);\n\nLinter.getOptions = function (args) {\n    var optList = Array.prototype.slice.call(args, 1);\n    optList = lodash.flattenDeep(optList);\n\n    optList.unshift('default');\n\n    return presets.flattenOpts(optList);\n};\n\nLinter.prototype.setupSubscriptions = function () {\n    this.rules.forEach(function (rule) {\n        rule.subscribers = this.rules.getSubscribers(rule.name);\n    }.bind(this));\n};\n\nLinter.prototype.lintByLine = function (lines, opts) {\n    return this.rules.getRule('line').lint(lines, opts, this.inlineConfig);\n};\n\nLinter.prototype.lintDom = function (dom, opts) {\n    return this.rules.getRule('dom').lint(dom, opts, this.inlineConfig);\n};\n\nLinter.prototype.resetRules = function (opts) {\n    var issues = [];\n\n    this.rules.forEach(function (rule) {\n        if (!rule.end) {\n            return;\n        }\n\n        var result = rule.end(opts);\n        if (result) {\n            issues.push(result);\n        }\n    });\n\n    return lodash.flattenDeep(issues);\n};\n\nLinter.prototype.setupInlineConfigs = function (dom) {\n    var comments = [];\n    var feedComments = function (element) {\n        if (element.type === 'comment') {\n            comments.push(element);\n            this.inlineConfig.feedComment(element);\n        }\n        if (element.children && element.children.length > 0) {\n            element.children.forEach(function (child) {\n                feedComments(child);\n            });\n        }\n    }.bind(this);\n    if (dom.length) {\n        dom.forEach(feedComments);\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-htmllint/node_modules/htmllint/lib/parser/index.js":"var htmlparser2 = require('htmlparser2');\nvar DomBuilder = require('./dom_builder'),\n    knife = require('../knife');\n\nvar Parser = function () {\n    this.domBuilder = new DomBuilder();\n\n    // more information for these options can be found at:\n    // https://github.com/fb55/htmlparser2/wiki/Parser-options\n    this.parser = new htmlparser2.Parser(this.domBuilder, {\n        decodeEntities: false,\n        lowerCaseAttributeNames: false,\n        lowerCaseTags: false,\n        recognizeCDATA: false,\n        recognizeSelfClosing: false,\n        xmlNode: false\n    });\n    this.domBuilder.initialize(this.parser);\n};\nmodule.exports = Parser;\n\nParser.prototype.parse = function (htmlText) {\n    var dom = null;\n\n    // expose the raw html text to the dom builder and initialize\n    this.domBuilder.start(htmlText);\n\n    // write to the parser\n    this.parser.write(htmlText);\n    this.parser.end();\n    // htmlparser2 is insane >.>\n    this.parser.startIndex = 0;\n    this.parser.endIndex = -1;\n\n    // store the dom and reset the parser/handler\n    dom = this.domBuilder.dom;\n    this.parser.reset();\n\n    return dom;\n};\n","/home/travis/build/npmtest/node-npmtest-htmllint/node_modules/htmllint/lib/parser/dom_builder.js":"var htmlparser2 = require('htmlparser2'),\n    util = require('util'),\n    knife = require('../knife');\nvar DomHandler = htmlparser2.DomHandler,\n    DomBuilder = function () {\n        this.parser = null;\n        this.attributes = {};\n        this.attribArr = [];\n        this.dupes = [];\n        DomHandler.apply(this, Array.prototype.slice.call(arguments));\n    };\nmodule.exports = DomBuilder;\n\nutil.inherits(DomBuilder, DomHandler);\n\n// NOTE: this must be called before parsing begins\nDomBuilder.prototype.initialize = function (parser) {\n    this.parser = parser;\n};\n\nDomBuilder.prototype.start = function (htmlText) {\n    this.htmlText = htmlText;\n    this.lineColFunc = knife.getLineColFunc(htmlText);\n    // When a tag has no close, startIndex is too large by 3 for the\n    // next calls to onopentag and _addDomElement. Keep track of this.\n    this.was_closed = true;\n};\n\nDomBuilder.prototype.onerror = function (error) {\n    // TODO: actually bubble this up or queue errors\n    throw error;\n};\n\nDomBuilder.prototype.onattribute = function (name, value) {\n    if (!this.attributes[name]) {\n        this.attributes[name] = {\n            value: value\n        };\n        this.attribArr.push(name);\n    } else {\n        this.dupes.push(name);\n    }\n};\n\n/*eslint-disable no-underscore-dangle*/\nDomBuilder.prototype.onopentag = function (name, attribs) {\n    DomHandler.prototype.onopentag.call(this, name, attribs);\n\n    var ele = this._tagStack[this._tagStack.length - 1];\n    ele.openIndex = this.parser.startIndex;\n    if (!this.was_closed) { ele.openIndex -= 3; }\n    this.was_closed = true;\n    ele.open = this.htmlText.slice(ele.openIndex + 1, this.parser.endIndex);\n    ele.openLineCol = this.lineColFunc(ele.openIndex);\n    // remove duplicate data\n    delete ele.lineCol;\n\n    ele.attribs = this.attributes;\n    //ele.attribsArr = this.attribArr;\n    knife.inputIndices(ele.attribs, ele.open, ele.openIndex);\n\n    this.attribArr\n        .sort(function (a, b) {\n            return ele.attribs[a].nameIndex - ele.attribs[b].nameIndex;\n        })\n        .forEach(function (attrib) {\n            var a = ele.attribs[attrib];\n            a.nameLineCol = this.lineColFunc(a.nameIndex);\n            a.valueLineCol = this.lineColFunc(a.valueIndex);\n        }, this);\n\n    this.attribArr = [];\n    this.attributes = {};\n\n    ele.dupes = this.dupes;\n    this.dupes = [];\n};\n\nDomBuilder.prototype.onclosetag = function () {\n    var ele = this._tagStack[this._tagStack.length - 1];\n\n    if (ele && !knife.isVoidElement(ele.name)) {\n        // Mercifully, no whitespace is allowed between < and /\n        this.was_closed = this.htmlText[this.parser.startIndex + 1] === '/';\n        ele.close = this.was_closed\n            ? this.htmlText.slice(this.parser.startIndex + 2, this.parser.endIndex)\n            : '';\n        ele.closeIndex = this.parser.startIndex;\n        if (!this.was_closed && ele.closeIndex == ele.openIndex) {\n            ele.closeIndex += ele.open.length + 1;\n        }\n        ele.closeLineCol = this.lineColFunc(ele.closeIndex);\n    }\n\n    DomHandler.prototype.onclosetag.call(this);\n};\n\nDomBuilder.prototype.onprocessinginstruction = function (name, data) {\n    // htmlparser2 doesn't normally update the position when processing\n    // declarations or processing directives (<!doctype ...> or <?...> elements)\n    this.parser._updatePosition(2);\n    DomHandler.prototype.onprocessinginstruction.call(this, name, data);\n};\n\nDomBuilder.prototype._addDomElement = function (ele) {\n    if (!this.parser) {\n        // TODO: rewrite error msg\n        throw new Error('stop being a bone head >.<');\n    }\n    ele.index = this.parser.startIndex;\n    if (!this.was_closed) { ele.index -= 3; }\n    ele.lineCol = this.lineColFunc(ele.index);\n    DomHandler.prototype._addDomElement.call(this, ele);\n};\n/*eslint-enable no-underscore-dangle*/\n","/home/travis/build/npmtest/node-npmtest-htmllint/node_modules/htmllint/lib/knife/index.js":"var bulk = require('bulk-require');\nvar lodash = require('lodash');\n\n// import all the js files in the directory\nvar utilExports = bulk(__dirname, '!(index).js');\nvar utils = {};\n\n// mixin all the functions from the exports into utils\nlodash.values(utilExports).forEach(function (u) {\n    lodash.mixin(utils, u);\n});\n\n// export utils\nmodule.exports = utils;\n","/home/travis/build/npmtest/node-npmtest-htmllint/node_modules/htmllint/lib/knife/apply_rules.js":"var lodash = require('lodash');\n\nfunction addRuleToIssue (issue, ruleName) {\n\n    if (Array.isArray(issue)) {\n        issue.forEach(function (issue) {\n            addRuleToIssue(issue, ruleName);\n        });\n    }\n    else {\n        issue.rule = issue.rule || ruleName;\n    }\n\n}\n\nmodule.exports = {\n    applyRules: function(rules, element, opts) {\n        if (!rules) {\n            return [];\n        }\n\n        return lodash.flattenDeep(rules.map(function(rule) {\n            var issues = rule.lint.call(rule, element, opts);\n\n            addRuleToIssue(issues, rule.name);\n\n            return issues;\n        }));\n\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-htmllint/node_modules/htmllint/lib/knife/attr_parse.js":"// Parse the attributes in an opening tag's text.\n// First five capture groups:\n// 1: Leading spaces\n// 2: Attribute name\n// 3: Everything after the name\n// 4: Text between matches 2 and 3\n// 5: Attribute value, including any quotation marks\nvar attrRegex = /(\\s*)([^ \"'>=\\^]+)((\\s*=\\s*)((?:\"[^\"]*\")|(?:'[^']*')|(?:\\S+)))?/g;\n\nmodule.exports.parseHtmlAttrs = function (attrs) {\n    var ret = [],\n        match;\n\n    while (match = attrRegex.exec(attrs)) {\n        ret.push({\n            name: match[2],\n            valueRaw: match[5]\n        });\n    }\n\n    return ret;\n};\n\n// Find the indices for attribute names and values.\n// If an attribute is duplicated, use the first instance that has a value,\n// or the first instance if there is no value.\nmodule.exports.inputIndices = function (attributes, openTag, openIndex) {\n    openTag = openTag.slice(openTag.indexOf(' ')); // Remove tag name\n    var match;\n    while (match = attrRegex.exec(openTag)) {\n        var name = match[2].trim();\n        if (name && attributes.hasOwnProperty(name)) {\n            var attr = attributes[name];\n\n            if (attr.valueIndex !== undefined\n                || (!match[5] && attr.nameIndex !== undefined)) {\n                continue;\n            }\n\n            var nameIndex = openIndex + match.index + match[1].length;\n            attr.nameIndex = nameIndex;\n            attr.rawEqValue = match[3];\n            attr.rawValue = match[5];\n\n            if (match[5]) {\n                attr.valueIndex = nameIndex\n                                + match[2].length + match[4].length;\n            }\n        }\n    }\n    Object.keys(attributes).forEach(function (name) {\n        var attr = attributes[name];\n        if (attr.valueIndex === undefined) {\n            attr.valueIndex = attr.nameIndex;\n        }\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-htmllint/node_modules/htmllint/lib/knife/boolean_attrs.js":"var booleanAttrs = [\n    'allowfullscreen'\n   ,'async'\n   ,'autofocus'\n   ,'autoplay'\n   ,'checked'\n   ,'compact'\n   ,'controls'\n   ,'declare'\n   ,'default'\n   ,'defaultchecked'\n   ,'defaultmuted'\n   ,'defaultselected'\n   ,'defer'\n   ,'disabled'\n   ,'draggable'\n   ,'enabled'\n   ,'formnovalidate'\n   ,'hidden'\n   ,'indeterminate'\n   ,'inert'\n   ,'ismap'\n   ,'itemscope'\n   ,'loop'\n   ,'multiple'\n   ,'muted'\n   ,'nohref'\n   ,'noresize'\n   ,'noshade'\n   ,'novalidate'\n   ,'nowrap'\n   ,'open'\n   ,'pauseonexit'\n   ,'readonly'\n   ,'required'\n   ,'reversed'\n   ,'scoped'\n   ,'seamless'\n   ,'selected'\n   ,'sortable'\n   ,'spellcheck'\n   ,'translate'\n   ,'truespeed'\n   ,'typemustmatch'\n   ,'visible'\n];\n\nmodule.exports = {\n    isBooleanAttr:\n        function(name) {\n            return booleanAttrs.indexOf(name.toLowerCase()) >= 0;\n        }\n};\n","/home/travis/build/npmtest/node-npmtest-htmllint/node_modules/htmllint/lib/knife/get_format_test.js":"var lodash = require('lodash');\n\nvar formats = {\n    lowercase: /^[a-z][a-z\\d]*$/,\n    underscore: /^[a-z][a-z\\d]*(_[a-z\\d]+)*$/,\n    dash: /^[a-z][a-z\\d]*(-[a-z\\d]+)*$/,\n    camel: /^[a-zA-Z][a-zA-Z\\d]*$/,\n    bem: /^([a-z][a-z\\d]*(-[a-z\\d]+)*(--[a-z\\d]+)*(__[a-z\\d]+)*)+$/\n};\n\nmodule.exports = {\n    getFormatTest: function (name) {\n        var regex = lodash.isRegExp(name) ? name : formats[name];\n\n        return regex.test.bind(regex);\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-htmllint/node_modules/htmllint/lib/knife/is_labeable.js":"var lodash = require('lodash');\n\n// these elements are *labelable elements* according to the HTML spec\nvar elems = [\n    'button',\n    'input', // if not in the hidden state\n    'keygen',\n    'meter',\n    'output',\n    'progress',\n    'select',\n    'textarea'\n];\n\n/**\n * Returns whether or not an html element can be associated with a\n * label element.\n * @param {Object} ele - an html element from the htmlparser2 parser\n * @returns {Boolean} whether or not `ele` is labelable\n */\nmodule.exports.isLabeable = function (ele) {\n    if (ele.type !== 'tag' || !lodash.includes(elems, ele.name)) {\n        // element isn't a tag or isn't a labeable element\n        return false;\n    }\n\n    if (ele.name === 'input' && ele.attribs && ele.attribs.type &&\n        ele.attribs.type.value === 'hidden') {\n        // inputs that are hidden are not labeable elements\n        return false;\n    }\n\n    // element passed all the tests\n    return true;\n};\n","/home/travis/build/npmtest/node-npmtest-htmllint/node_modules/htmllint/lib/knife/is_void_element.js":"var elems = [\n    'area',\n    'base',\n    'br',\n    'col',\n    'embed',\n    'hr',\n    'img',\n    'input',\n    'keygen',\n    'link',\n    'menuitem',\n    'meta',\n    'param',\n    'source',\n    'track',\n    'wbr',\n\n    //common self closing svg elements\n    'path',\n    'circle',\n    'ellipse',\n    'line',\n    'rect',\n    'use',\n    'stop',\n    'polyline',\n    'polygon'\n];\n\n/**\n * Returns whether or not an html tag name is a void element.\n * @param {String} tagName - a name of a html tag\n * @returns {Boolean} whether or not `tagName` is a void element\n */\nmodule.exports.isVoidElement = function (tagName) {\n    return elems.indexOf(tagName) !== -1;\n};\n","/home/travis/build/npmtest/node-npmtest-htmllint/node_modules/htmllint/lib/knife/lang_tag.js":"// List of ISO 639-1 language codes\nvar langCodes = [\n    'ab', 'aa', 'af', 'sq', 'am', 'ar', 'an', 'hy', 'as', 'ay',\n    'az', 'ba', 'eu', 'bn', 'dz', 'bh', 'bi', 'br', 'bg', 'my',\n    'be', 'km', 'ca', 'zh', 'co', 'hr', 'cs', 'da', 'nl', 'en',\n    'eo', 'et', 'fo', 'fa', 'fj', 'fi', 'fr', 'fy', 'gl', 'gd',\n    'gv', 'ka', 'de', 'el', 'kl', 'gn', 'gu', 'ht', 'ha', 'he',\n    'iw', 'hi', 'hu', 'is', 'io', 'id', 'in', 'ia', 'ie', 'iu',\n    'ik', 'ga', 'it', 'ja', 'jv', 'kn', 'ks', 'kk', 'rw', 'ky',\n    'rn', 'ko', 'ku', 'lo', 'la', 'lv', 'li', 'ln', 'lt', 'mk',\n    'mg', 'ms', 'ml', 'mt', 'mi', 'mr', 'mo', 'mn', 'na', 'ne',\n    'no', 'oc', 'or', 'om', 'ps', 'pl', 'pt', 'pa', 'qu', 'rm',\n    'ro', 'ru', 'sm', 'sg', 'sa', 'sr', 'sh', 'st', 'tn', 'sn',\n    'ii', 'sd', 'si', 'ss', 'sk', 'sl', 'so', 'es', 'su', 'sw',\n    'sv', 'tl', 'tg', 'ta', 'tt', 'te', 'th', 'bo', 'ti', 'to',\n    'ts', 'tr', 'tk', 'tw', 'ug', 'uk', 'ur', 'uz', 'vi', 'vo',\n    'wa', 'cy', 'wo', 'xh', 'yi', 'ji', 'yo', 'zu',\n    // Chinese scripts\n    'zh-Hans', 'zh-Hant'\n];\n\nfunction checkLang(code) {\n    return code.length === 0  ||  langCodes.indexOf(code) !== -1;\n}\n\n// List of ISO country codes\nvar countryCodes = [\n    'AF', 'AL', 'DZ', 'AS', 'AD', 'AO', 'AQ', 'AG', 'AR', 'AM',\n    'AW', 'AU', 'AT', 'AZ', 'BS', 'BH', 'BD', 'BB', 'BY', 'BE',\n    'BZ', 'BJ', 'BM', 'BT', 'BO', 'BA', 'BW', 'BV', 'BR', 'IO',\n    'BN', 'BG', 'BF', 'BI', 'KH', 'CM', 'CA', 'CV', 'KY', 'CF',\n    'TD', 'CL', 'CN', 'CX', 'CC', 'CO', 'KM', 'CG', 'CD', 'CK',\n    'CR', 'CI', 'HR', 'CU', 'CY', 'CZ', 'DK', 'DJ', 'DM', 'DO',\n    'EC', 'EG', 'SV', 'GQ', 'ER', 'EE', 'ET', 'FK', 'FO', 'FJ',\n    'FI', 'FR', 'GF', 'PF', 'TF', 'GA', 'GM', 'GE', 'DE', 'GH',\n    'GI', 'GR', 'GL', 'GD', 'GP', 'GU', 'GT', 'GN', 'GW', 'GY',\n    'HT', 'HM', 'HN', 'HK', 'HU', 'IS', 'IN', 'ID', 'IR', 'IQ',\n    'IE', 'IL', 'IT', 'JM', 'JP', 'JO', 'KZ', 'KE', 'KI', 'KP',\n    'KR', 'KW', 'KG', 'LA', 'LV', 'LB', 'LS', 'LR', 'LY', 'LI',\n    'LT', 'LU', 'MO', 'MK', 'MG', 'MW', 'MY', 'MV', 'ML', 'MT',\n    'MH', 'MQ', 'MR', 'MU', 'YT', 'MX', 'FM', 'MD', 'MC', 'MN',\n    'ME', 'MS', 'MA', 'MZ', 'MM', 'NA', 'NR', 'NP', 'NL', 'AN',\n    'NC', 'NZ', 'NI', 'NE', 'NG', 'NU', 'NF', 'MP', 'NO', 'OM',\n    'PK', 'PW', 'PS', 'PA', 'PG', 'PY', 'PE', 'PH', 'PN', 'PL',\n    'PT', 'PR', 'QA', 'RE', 'RO', 'RU', 'RW', 'SH', 'KN', 'LC',\n    'PM', 'VC', 'WS', 'SM', 'ST', 'SA', 'SN', 'RS', 'SC', 'SL',\n    'SG', 'SK', 'SI', 'SB', 'SO', 'ZA', 'GS', 'ES', 'LK', 'SD',\n    'SR', 'SJ', 'SZ', 'SE', 'CH', 'SY', 'TW', 'TJ', 'TZ', 'TH',\n    'TL', 'TG', 'TK', 'TO', 'TT', 'TN', 'TR', 'TM', 'TC', 'TV',\n    'UG', 'UA', 'AE', 'GB', 'US', 'UM', 'UY', 'UZ', 'VU', 'VE',\n    'VN', 'VG', 'VI', 'WF', 'EH', 'YE', 'ZM', 'ZW'\n];\n\nfunction checkCountry(code) {\n    return code.length === 0  ||  countryCodes.indexOf(code) !== -1;\n}\n\n\n// Check if a language tag has the form xx-YY, where xx is a valid\n// language code and YY is a valid country code.\n// Return 1 if the tag is invalid, or 2 if it is valid but has\n// unconventional capitalization.\nmodule.exports.checkLangTag = function(l) {\n    if (!l || l.length === 0) { return 0; }\n    var n = l.lastIndexOf('-');\n    var lang = '', country = '';\n    if (n === -1) { lang = l; }\n    else { lang = l.slice(0,n); country = l.slice(n + 1, l.length); }\n    return (checkLang(lang) && checkCountry(country)) ? 0\n      : (checkLang(lang.toLowerCase()) && checkCountry(country.toUpperCase())) ? 2\n      : 1;\n};\n","/home/travis/build/npmtest/node-npmtest-htmllint/node_modules/htmllint/lib/knife/match_filter.js":"module.exports.matchFilter = function (data, rule) {\n    if (!rule.filter) {\n        return true;\n    }\n\n    return rule.filter.indexOf(data.toLowerCase()) > -1;\n};\n","/home/travis/build/npmtest/node-npmtest-htmllint/node_modules/htmllint/lib/knife/relative_line_col.js":"// Given the raw html text, produce a function that transforms an index\n// into a line and column number. Indices must be passed to the resulting\n// function in order.\nmodule.exports.getLineColFunc = function (htmlText, lineCol) {\n    var lastInd = 0,\n        line = 0,\n        col = 0;\n    if (lineCol && lineCol[0] && lineCol[1]) {\n        line = lineCol[0];\n        col = lineCol[1];\n    }\n    return function (i) {\n        if (i < lastInd) {\n            throw new Error('Index passed to line/column' + ' function (' + i + ') does not keep with order (last was ' + lastInd + ')');\n        }\n        while (lastInd < i) {\n            if (htmlText[lastInd] === '\\n') {\n                col = 0;\n                line++;\n            } else {\n                col++;\n            }\n            lastInd++;\n        }\n        return [line + 1, col + 1];\n    };\n};\n","/home/travis/build/npmtest/node-npmtest-htmllint/node_modules/htmllint/lib/knife/shred.js":"/**\n * 'Shreds' the html by line for linting by line.\n * @param {String} html - your html.\n * @returns {String[]} the array of line objects.\n */\nmodule.exports.shred = function (html) {\n    // Take the HTML string\n    // Return an array of {line, line number, index}\n    var row = 1,\n        ind = 0,\n        shredded = [];\n\n    while (html) {\n        var len = html.search('[\\r\\n]') + 1;\n        if (len === 0) { len = html.length; }\n        else if (html[len - 1] === '\\r' && html[len] === '\\n') { len++; }\n        shredded[row] = {\n            line: html.substr(0, len),\n            index: ind,\n            row: row\n        };\n        row++; ind += len;\n        html = html.slice(len);\n    }\n\n    return shredded;\n};","/home/travis/build/npmtest/node-npmtest-htmllint/node_modules/htmllint/lib/knife/tag_utils.js":"module.exports.isSelfClosing = function (element) {\n    var openRaw = element.open;\n\n    return openRaw[openRaw.length - 1] === '/';\n};\n\n// Check whether the given tag has a non-empty attribute with the given\n// name. Count \"\" as a non-empty attribute value only if optional\n// parameter allowNull is true,\nmodule.exports.hasNonEmptyAttr = function(tag, attr, allowNull) {\n    var a = tag.attribs[attr];\n    return (a && (allowNull || (a.value && a.value.length > 0)));\n};\n","/home/travis/build/npmtest/node-npmtest-htmllint/node_modules/htmllint/lib/presets/index.js":"var lodash = require('lodash');\nvar bulk = require('bulk-require');\n\nvar presets = bulk(__dirname, '!(index).js');\npresets.none = lodash.mapValues(presets.default, function(){return false;});\nmodule.exports.presets = presets;\n\nmodule.exports.flattenOpts = function (optList) {\n    var options = {};\n\n    optList.forEach(function (opt) {\n        if (lodash.isString(opt)) {\n            opt = presets[opt];\n        }\n\n        lodash.assign(options, opt);\n    });\n\n    return options;\n};\n","/home/travis/build/npmtest/node-npmtest-htmllint/node_modules/htmllint/lib/presets/accessibility.js":"module.exports = {\n    'fig-req-figcaption': true,\n    'focusable-tabindex-style': true,\n    'input-radio-req-name': true,\n    'input-req-label': true,\n    'page-title': true,\n    'table-req-caption': true,\n    'table-req-header': true,\n    'tag-name-match':true\n};\n","/home/travis/build/npmtest/node-npmtest-htmllint/node_modules/htmllint/lib/presets/default.js":"module.exports = {\n    'attr-bans': [\n        'align',\n        'background',\n        'bgcolor',\n        'border',\n        'frameborder',\n        'longdesc',\n        'marginwidth',\n        'marginheight',\n        'scrolling',\n        'style',\n        'width'\n    ],\n    'indent-style': 'nonmixed',\n    'indent-width': 4,\n    'indent-width-cont': false,\n    'spec-char-escape': true,\n    'tag-bans': ['style', 'b', 'i'],\n    'tag-close': true,\n    'tag-name-lowercase': true,\n    'tag-name-match': true,\n    'tag-self-close': false,\n    'doctype-first': false,\n    'doctype-html5': false,\n    'attr-name-style': 'lowercase',\n    'attr-name-ignore-regex': false,\n    'attr-no-dup': true,\n    'attr-no-unsafe-char': true,\n    'attr-order': false,\n    'attr-quote-style': 'double',\n    'attr-req-value': true,\n    'id-no-dup': true,\n    'id-class-no-ad': true,\n    'id-class-style': 'underscore',\n    'class-no-dup': true,\n    'class-style': false,\n    'id-class-ignore-regex': false,\n    'img-req-alt': true,\n    'img-req-src': true,\n    'html-valid-content-model': true,\n    'head-valid-content-model': true,\n    'href-style': false,\n    'label-req-for': true,\n    'line-end-style': 'lf',\n    'line-max-len': false,\n    'line-max-len-ignore-regex': false,\n    'head-req-title': true,\n    'title-no-dup': true,\n    'title-max-len': 60,\n    'html-req-lang': false,\n    'lang-style': 'case'\n};\n","/home/travis/build/npmtest/node-npmtest-htmllint/node_modules/htmllint/lib/presets/validate.js":"module.exports = {\n    'doctype-first': true,\n    'doctype-html5': true,\n    'attr-no-dup': true,\n    'id-no-dup': true,\n    'img-req-alt': 'allownull',\n    'img-req-src': true,\n    'label-req-for': 'strict',\n    'title-no-dup': true,\n    'tag-close': true,\n    'html-valid-content-model': true,\n    'head-valid-content-model': true\n};\n","/home/travis/build/npmtest/node-npmtest-htmllint/node_modules/htmllint/lib/rule_list.js":"var lodash = require('lodash');\n\nfunction RuleList() {\n    this.rulesMap = {};\n    this.subsMap = {};\n}\nmodule.exports = RuleList;\n\nRuleList.fromRuleMap = function (ruleMap) {\n    var ruleList = new RuleList();\n\n    lodash.forOwn(ruleMap, function (rule) {\n        ruleList.addRule(rule);\n    });\n\n    return ruleList;\n};\n\nRuleList.prototype.getRule = function (ruleName) {\n    return this.rulesMap[ruleName];\n};\n\nRuleList.prototype.getSubscribers = function (subName) {\n    var subs = this.subsMap[subName];\n\n    return subs ? subs : [];\n};\n\nRuleList.prototype.addRule = function (rule) {\n    var ruleName = rule.name;\n\n    if (this.rulesMap[ruleName]) {\n        this.removeRule(ruleName);\n    }\n\n    this.subscribeRule(rule);\n    this.rulesMap[ruleName] = rule;\n};\n\nRuleList.prototype.removeRule = function (ruleName) {\n    var rule = this.getRule(ruleName);\n\n    if (rule) {\n        this.unsubscribeRule(rule);\n    }\n\n    delete this.rulesMap[ruleName];\n};\n\nRuleList.prototype.unsubscribeRule = function (rule) {\n    if (!rule.on) {\n        return;\n    }\n\n    rule.on.forEach(function (subName) {\n        var subIndex = this.subsMap[subName].indexOf(rule);\n        this.subsMap[subName].splice(subIndex, 1);\n    }.bind(this));\n};\n\nRuleList.prototype.subscribeRule = function (rule) {\n    if (!rule.on) {\n        return;\n    }\n\n    rule.on.forEach(function (subName) {\n        if (!this.subsMap[subName]) {\n            this.subsMap[subName] = [];\n        }\n        this.subsMap[subName].push(rule);\n    }.bind(this));\n};\n\nRuleList.prototype.forEach = function (func) {\n    lodash.forOwn(this.rulesMap, function (rule) {\n        // this function call is wrapped because lodash.forOwn\n        // passes back 3 args, this method should only pass back 1\n        func(rule);\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-htmllint/node_modules/htmllint/lib/inline_config.js":"var knife = require('./knife'),\n    lodash = require('lodash'),\n    presets = require('./presets');\n\n// Private vars,\nvar index = 0, // index used for making sure configs are sent in order\n    basis = null; // a copy of the original options given to us, for a reset.\n\n/**\n * An inline configuration class is created to hold each inline configuration\n * and report back what the options should be at a certain index.\n * @constructor\n * @param {Object} newBasis - The set of options to have at the start (index 0).\n * If not given here, it must be set with inlineConfig.reset(basis).\n */\nvar inlineConfig = function (newBasis) {\n    this.indexConfigs = [];\n    this.current = newBasis ? lodash.cloneDeep(newBasis) : this.current;\n    basis = newBasis ? lodash.cloneDeep(newBasis) : basis;\n    this.previous = {};\n};\nmodule.exports = inlineConfig;\n\n// regexes used for parsing the configuration comment.\nvar regex = {\n    open: /[\\s]*htmllint[\\s]+(.*)/, // strip out the 'htmllint'\n    name: /^[a-zA-Z0-9-_]+$/ // checks for a valid name\n};\n\n/**\n * Reset the current opts to the basis. if newBasis is supplied, use that as our new basis.\n * @param {Object} newBasis - the new options to use.\n */\ninlineConfig.prototype.reset = function (newBasis) {\n    basis = newBasis ? lodash.cloneDeep(newBasis) : basis;\n    this.current = lodash.cloneDeep(basis);\n    index = 0;\n};\n\n/**\n * Clears the indexConfigs object, then calls reset with 'null' - to be called after linting finishes.\n * @param {Object} newBasis - the new options to use.\n */\ninlineConfig.prototype.clear = function () {\n    this.indexConfigs = [];\n    this.reset(null);\n};\n\n/**\n * Apply the given cofiguration to this.current. Returns true if the operation resulted in any changes, false otherwise.\n * @param {Object} config - the new config to write onto the current options.\n */\nfunction applyConfig(config) {\n    var changed = false;\n    config.rules.forEach(function (rule) {\n        // for each rule in the configuration, apply it to this.current\n        if (rule.type === 'rule') {\n            if (!(rule.name in this.current)) {\n                throw new Error('option ' + rule.name + ' does not exist.');\n            } else {\n                var cur = this.current[rule.name];\n                this.current[rule.name] = (rule.value === '$previous')\n                                            ? this.previous[rule.name]\n                                            : rule.value;\n                this.previous[rule.name] = cur;\n                changed = true;\n            }\n        /* istanbul ignore else */\n        } else if (rule.type === 'preset') {\n            lodash.merge(this.current, presets.presets[rule.name]);\n            changed = true;\n        }\n    }.bind(this));\n    return changed;\n}\n\n/**\n * Get the options object to use at this index. Indices must be given in order, or an error is thrown (much speedier).\n * If you must get them out of order, use 'reset' first. Sets the opts to this.current.\n * @param {number} newIndex - The index to get opts for.\n */\ninlineConfig.prototype.getOptsAtIndex = function (newIndex) {\n    if (newIndex !== 0 && newIndex <= index) {\n        throw new Error('Cannot get options for index ' + newIndex + ' when index ' + index + ' has already been checked');\n    } else {\n        var configs = lodash.compact(this.indexConfigs.slice(index + 1, newIndex + 1));\n        index = newIndex;\n        /*\n         * NOTE: right now, this only allows for a maximum of one config to be applied\n         * from one call to the next. This makes sense if we call the function on each element or\n         * even each comment. If this changes later, use a loop below.\n         */\n        // if there are no configs between the previous this.current and the new this.current, do nothing.\n        if (!configs[0]) {\n            return false;\n        }\n\n        return applyConfig.call(this, configs[0]); // apply that config\n    }\n};\n\n/**\n * Add the config when it was given to us from feedComment.\n * @param {Object} config - The config to add.\n */\ninlineConfig.prototype.addConfig = function (config) {\n    if (this.indexConfigs[config.end]) {\n        throw new Error('config exists at index already!');\n    }\n\n    this.indexConfigs[config.end] = config;\n};\n\n/**\n * Take the comment element and check it for the proper structure. Add it to our array indexConfigs.\n * @param {number} newIndex - The index to get opts for.\n */\ninlineConfig.prototype.feedComment = function (element) {\n    var line = element.data,\n        match = line.match(regex.open);\n\n    if (!match) {\n        return;\n    }\n    // we know this has 'htmllint' at the beginning, now parse the attribute structure if possible\n\n    var keyvals = knife.parseHtmlAttrs(match[1]);\n\n    var length = keyvals.length,\n        workingPairs = [];\n\n    for (var i = 0; i < length; i++) {\n        var r = parsePair(keyvals[i].name, keyvals[i].valueRaw);\n        if ((typeof r) === 'string') {\n            throw new Error(r);\n        } else {\n            workingPairs.push(r);\n        }\n    }\n    if (workingPairs.length < 1) {\n        return;\n    }\n\n    var config = {\n        start: element.index,\n        end: element.index + element.data.length + 6, // 7 for the '<!--' and '-->', spaces were in element.data already\n        rules: workingPairs //in order!\n    };\n    // add it\n    this.addConfig(config);\n};\n\n/**\n * Accept an attribute and return either a parsed config pair object\n * or an error string.\n * @param {string} name - The attribute name.\n * @param {string} value - The attribute raw value.\n */\nfunction parsePair(name, value) {\n    if (!name || !value || !name.length || !value.length) {\n        return 'Invalid configuration';\n    }\n\n    if (!regex.name.test(name)) {\n        return 'Invalid rule or preset name: ' + name;\n    }\n\n    // Strip quotes and replace single quotes with double quotes\n    var squote = \"'\", dquote = '\"'; // Single and double quote, for sanity\n    if (value[0] === squote  ||  value[0] === dquote) {\n        value = value.substr(1, value.length - 2);\n    }\n    value = value.replace(/\\'/g, dquote);\n\n    // Treat _ and - interchangeably\n    name = name.replace(/_/g, '-');\n\n    // check if our value is for a preset.\n    if (name === 'preset') {\n        if (!presets.presets[value]) {\n            return 'Not a preset: ' + value;\n        } else {\n            return { type: 'preset', name: value };\n        }\n    }\n\n    // it's not a preset.\n    var parsed = null;\n    if (value === '$previous') {\n        parsed = '$previous';\n    } else if (value[0] === '$') {\n        var vs = value.substr(1);\n        if (!presets.presets[vs]) {\n            return 'Not a preset: ' + vs;\n        }\n        parsed = presets.presets[vs][name];\n    } else {\n        try {\n            parsed = JSON.parse(value);\n        } catch (e) {\n            if (!regex.name.test(value)) {\n                return 'Value not recognized in inline configuration';\n            }\n            parsed = value;\n        }\n    }\n\n    return { type: 'rule', name: name, value: parsed };\n}\n","/home/travis/build/npmtest/node-npmtest-htmllint/node_modules/htmllint/lib/rules/index.js":"/* This file exports a map whose values are all of the\n * exported rules (with the rule names as their keys).\n */\n\nvar bulk = require('bulk-require');\n\n// do a bulk require on all the files in this directory\n// excluding this file\nvar rulesExport = bulk(__dirname, '!(index).js');\n\n// loop over the exported rules to get a map of\n// (rule name) -> (rule)\nObject.keys(rulesExport)\n    .forEach(function (key) {\n        // retrieve the rule\n        var rule = rulesExport[key];\n\n        // export the rule under the rule.name property\n        module.exports[rule.name] = rule;\n    });\n","/home/travis/build/npmtest/node-npmtest-htmllint/node_modules/htmllint/lib/rules/attr-bans.js":"var Issue = require('../issue');\n\nmodule.exports = {\n    name: 'attr-bans',\n    on: ['tag']\n};\n\nmodule.exports.lint = function (element, opts) {\n    var bannedAttrs = opts[this.name];\n\n    if (!bannedAttrs || !element.attribs) {\n        return [];\n    }\n\n    var issues = [];\n\n    var attrs = element.attribs;\n    bannedAttrs.forEach(function (name) {\n        if (attrs.hasOwnProperty(name)) {\n            issues.push(new Issue('E001',\n                attrs[name].nameLineCol, { attribute: name }));\n        }\n    });\n\n    return issues;\n};\n","/home/travis/build/npmtest/node-npmtest-htmllint/node_modules/htmllint/lib/issue.js":"function Issue(code, pos, data) {\n    this.line = pos[0];\n    this.column = pos[1];\n    this.code = code;\n    this.data = data || {};\n}\nmodule.exports = Issue;\n","/home/travis/build/npmtest/node-npmtest-htmllint/node_modules/htmllint/lib/rules/attr-name-style.js":"var knife = require('../knife'),\n    Issue = require('../issue');\n\nmodule.exports = {\n    name: 'attr-name-style',\n    on: ['attr']\n};\n\nmodule.exports.lint = function (attr, opts) {\n    var format = opts[this.name];\n    if (!format) {\n        return [];\n    }\n\n    var ignore = opts['attr-name-ignore-regex'];\n    if (ignore !== false && (new RegExp(ignore)).test(attr.name)) { return []; }\n\n    var verify = knife.getFormatTest(format);\n\n    return verify(attr.name) ? [] :\n        new Issue('E002', attr.nameLineCol, { format: format });\n};\n","/home/travis/build/npmtest/node-npmtest-htmllint/node_modules/htmllint/lib/rules/attr-new-line.js":"var Issue = require('../issue');\n\nmodule.exports = {\n    name: 'attr-new-line',\n    on: ['tag']\n};\n\nmodule.exports.lint = function(element, opts) {\n\n    if ((!opts[this.name] || !element.dupes) && opts[this.name] !== 0) {\n        return [];\n    }\n\n    var isPlus = opts[this.name] === '+0';\n    var aRowLimit = Math.floor(opts[this.name]);\n\n    var numberOfAttrsOnFirstRow = 0;\n    var maxNumberOfAttrsOnAllRows = -1;\n    var aNumber = Object.keys(element.attribs).length;\n\n    var currentNumberOfAttrsInRow = 0;\n    var currentRowNumber = aNumber > 0 && /\\s*\\w+\\s*\\n\\s*/.test(element.open) ? 1 : 0;\n    var prevRowNumber = currentRowNumber;\n    var prevLineNumber = -1;\n\n\n    Object.keys(element.attribs).forEach(function(attrName) {\n\n        prevRowNumber = currentRowNumber;\n\n        if (prevLineNumber !== -1 && prevLineNumber !== element.attribs[attrName].valueLineCol[0]) {\n\n            if (maxNumberOfAttrsOnAllRows < currentNumberOfAttrsInRow) {\n                maxNumberOfAttrsOnAllRows = currentNumberOfAttrsInRow;\n            }\n\n            if (currentRowNumber === 0) {\n                numberOfAttrsOnFirstRow = currentNumberOfAttrsInRow;\n            }\n\n            currentNumberOfAttrsInRow = 0;\n            currentRowNumber++;\n        }\n\n        if (prevRowNumber === currentRowNumber) {\n            currentNumberOfAttrsInRow++;\n        }\n\n        prevLineNumber = element.attribs[attrName].valueLineCol[0];\n    });\n\n    if (maxNumberOfAttrsOnAllRows < currentNumberOfAttrsInRow) {\n        maxNumberOfAttrsOnAllRows = currentNumberOfAttrsInRow;\n    }\n\n    if (currentRowNumber === 0) {\n        numberOfAttrsOnFirstRow = currentNumberOfAttrsInRow;\n    }\n\n    if ((numberOfAttrsOnFirstRow > aRowLimit || maxNumberOfAttrsOnAllRows > Math.max(1,aRowLimit)) && !(isPlus && aNumber === 1)) {\n        return new Issue('E037', element.openLineCol, {\n            limit: aRowLimit\n        });\n    }\n\n    return [];\n};\n","/home/travis/build/npmtest/node-npmtest-htmllint/node_modules/htmllint/lib/rules/attr-no-dup.js":"var Issue = require('../issue');\n\nmodule.exports = {\n    name: 'attr-no-dup',\n    on: ['tag']\n};\n\nmodule.exports.lint = function (element, opts) {\n    if (!opts[this.name] || !element.dupes) {\n        return [];\n    }\n\n    return element.dupes.map(function (n) {\n        var a = element.attribs[n];\n\n        return new Issue('E003', a.nameLineCol, { attribute: n });\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-htmllint/node_modules/htmllint/lib/rules/attr-no-unsafe-char.js":"var Issue = require('../issue');\nvar regUnsafe = /[\\u0000-\\u001f\\u007f-\\u009f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/;\n\nmodule.exports = {\n    name: 'attr-no-unsafe-char',\n    on: ['attr']\n};\n\nmodule.exports.lint = function (attr, opts) {\n    var format = opts[this.name];\n    if (!format) {\n        return [];\n    }\n\n    return regUnsafe.test(attr.value) ? new Issue('E004', attr.valueLineCol) : [];\n};\n","/home/travis/build/npmtest/node-npmtest-htmllint/node_modules/htmllint/lib/rules/attr-order.js":"var Issue = require('../issue');\n\nmodule.exports = {\n    name: 'attr-order',\n    on: ['tag']\n};\n\nmodule.exports.lint = function (element, opts) {\n    var order = opts[this.name];\n    if (!order) {\n        return [];\n    }\n\n    var attrs = element.attribs,\n        lastpos = 0,\n        lastname,\n        issues = [];\n    order.forEach(function(name) {\n        if (!attrs.hasOwnProperty(name)) return;\n        var a = attrs[name];\n        var pos = a.nameIndex;\n        if (pos > lastpos) {\n            lastpos = pos;\n            lastname = name;\n        } else {\n            issues.push(new Issue('E043', a.nameLineCol,\n                { attribute: name, previous: lastname }));\n        }\n    });\n\n    return issues;\n};\n","/home/travis/build/npmtest/node-npmtest-htmllint/node_modules/htmllint/lib/rules/attr-quote-style.js":"var knife = require('../knife'),\n    Issue = require('../issue');\n\nmodule.exports = {\n    name: 'attr-quote-style',\n    on: ['attr']\n};\n\n// only need to match the beginning of the raw value\nvar formats = {\n    'double': /^\"/,\n    'single': /^'/,\n    'quoted': /^['\"]/\n};\n\nvar formatNames = {\n    'double': 'double quoted',\n    'single': 'single quoted',\n    'quoted': 'quoted'\n};\n\nmodule.exports.lint = function (attr, opts) {\n    if (!opts[this.name]) {\n        return [];\n    }\n\n    var format = formats[opts[this.name]] || formats.quoted,\n        issues = [];\n\n    var v = attr.rawValue;\n    if (v && !format.test(v)) {\n        var msgData = {\n            attribute: attr.name,\n            format: formatNames[opts[this.name]] || formatNames.quoted\n        };\n        return new Issue('E005', attr.valueLineCol, msgData);\n    }\n\n    return [];\n};\n","/home/travis/build/npmtest/node-npmtest-htmllint/node_modules/htmllint/lib/rules/attr-req-value.js":"var knife = require('../knife'),\n    Issue = require('../issue');\n\nmodule.exports = {\n    name: 'attr-req-value',\n    on: ['attr']\n};\n\nmodule.exports.lint = function (attr, opts) {\n    if (!opts[this.name]) {\n        return [];\n    }\n\n    var v = attr.rawEqValue;\n    if (v ? /^[^'\"]+=/.test(v) : !knife.isBooleanAttr(attr.name)) {\n        return new Issue('E006', attr.valueLineCol);\n    }\n\n    return [];\n};\n","/home/travis/build/npmtest/node-npmtest-htmllint/node_modules/htmllint/lib/rules/attr.js":"var knife = require('../knife');\n\nmodule.exports = {\n    name: 'attr',\n    on: ['tag']\n};\n\nmodule.exports.lint = function(element, opts) {\n    var subs = this.subscribers,\n        as = element.attribs,\n        issues = [];\n\n    Object.keys(as).forEach(function(name) {\n        var a = as[name];\n        a.name = name;\n\n        var matcher = knife.matchFilter.bind(knife, name);\n        var s = subs.filter(matcher);\n\n        issues = issues.concat(knife.applyRules(s, a, opts));\n    });\n\n    return issues;\n};\n","/home/travis/build/npmtest/node-npmtest-htmllint/node_modules/htmllint/lib/rules/class.js":"var knife = require('../knife'),\n    Issue = require('../issue');\n\nmodule.exports = {\n    name: 'class',\n    on: ['attr'],\n    filter: ['class']\n};\n\nmodule.exports.lint = function (attr, opts) {\n    var format = opts['class-style'] || opts['id-class-style'];\n    var nodup = opts['class-no-dup'];\n    if (!(format || nodup)) {\n        return [];\n    }\n\n    var issues = [];\n    var v = attr.value;\n\n    var ignore = opts['id-class-ignore-regex'];\n    var classes = [];\n    // Parallel to classes; which classes are ignored\n    var ignore_class = false;\n    if (ignore) {\n        var re = new RegExp('(' + ignore + ')|\\\\s*$|\\\\s+', 'g');\n        var res;\n        var start = 0;\n        ignore_class = [false];\n        while (start < v.length && (res = re.exec(v)) !== null) {\n            if (res[1] === undefined) {\n                classes.push(v.slice(start, res.index));\n                start = re.lastIndex;\n                ignore_class.push(false);\n            } else {\n                ignore_class[ignore_class.length - 1] = true;\n            }\n        }\n        ignore_class.pop();\n    } else {\n        classes = v.split(/\\s+/);\n    }\n\n    if (format) {\n        var verify = knife.getFormatTest(format);\n\n        classes.map(function(c, i) {\n            if (!(ignore_class[i] || verify(c))) {\n                issues.push(new Issue('E011', attr.valueLineCol,\n                                      { format: format, 'class': c }));\n            }\n        });\n    }\n\n    if (nodup) {\n        classes = classes.sort();\n        for (var i = 0; i < classes.length - 1; i++) {\n            if (classes[i + 1] === classes[i]) {\n                issues.push(new Issue('E041', attr.valueLineCol,\n                                      { classes: v }));\n            }\n        }\n    }\n\n    return issues;\n};\n","/home/travis/build/npmtest/node-npmtest-htmllint/node_modules/htmllint/lib/rules/doctype-first.js":"var Issue = require('../issue');\n\nmodule.exports = {\n    name: 'doctype-first',\n    on: ['dom'],\n    passedFirst: false\n};\n\nmodule.exports.end = function () {\n    this.passedFirst = false;\n};\n\nmodule.exports.lint = function (element, opts) {\n    var option = opts[this.name];\n\n    if (!option || this.passedFirst ||\n        element.type === 'comment' || isWhitespace(element)) {\n        return [];\n    }\n    this.passedFirst = true;\n\n    if (element.type === 'directive' &&\n        element.name.toUpperCase() === '!DOCTYPE') {\n        return [];\n    }\n\n    // If the option is 'smart', fail only if a head tag is present.\n    if (option === 'smart' &&\n        !(element.type === 'tag' &&\n          element.name.toLowerCase() === 'head')) {\n        return [];\n    }\n\n    return new Issue('E007', element.openLineCol);\n};\n\nfunction isWhitespace(element) {\n    return element.type === 'text' && /^[ \\t\\n\\f\\r]*$/.test(element.data);\n};\n","/home/travis/build/npmtest/node-npmtest-htmllint/node_modules/htmllint/lib/rules/doctype-html5.js":"var Issue = require('../issue');\n\nmodule.exports = {\n    name: 'doctype-html5',\n    on: ['dom']\n};\n\nmodule.exports.lint = function (ele, opts) {\n    if (!opts[this.name] || ele.type !== 'directive') {\n        return [];\n    }\n\n    // NOTE: this does not support legacy strings or obsolete permitted doctypes\n\n    var doctype = /^!DOCTYPE[ \\t\\n\\f]+html[ \\t\\n\\f]*$/i;\n    var name = /!doctype/i;\n    if (name.test(ele.name)) {\n        if (ele.data && doctype.test(ele.data)) {\n            return [];\n        } else {\n            return new Issue('E008', ele.lineCol);\n        }\n    } else {\n        return [];\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-htmllint/node_modules/htmllint/lib/rules/dom.js":"var lodash = require('lodash'),\n    knife = require('../knife');\n\nmodule.exports = {\n    name: 'dom'\n};\n\nmodule.exports.lint = function(dom, opts, inlineConfigs) {\n    var subs = this.subscribers;\n\n    /*\n     * Reset our inline configuration object to be what opts is.\n     * Does a deep copy so as to not change opts in the future.\n     */\n    inlineConfigs.reset(opts);\n\n    var getIssues = function (element) {\n        var matcher = knife.matchFilter.bind(knife, element.type);\n\n        // fast-forwards inlineConfig.current to whatever it should be at this index.\n        inlineConfigs.getOptsAtIndex(element.index);\n\n        var s = subs.filter(matcher);\n        var ret = knife.applyRules(s, element, inlineConfigs.current);\n\n        if (element.children && element.children.length > 0) {\n            element.children.forEach(function (child) {\n                ret = ret.concat(getIssues(child));\n            });\n        }\n        return ret;\n    };\n\n    var issues = dom.length ? dom.map(getIssues) : [];\n    return lodash.flattenDeep(issues);\n};\n","/home/travis/build/npmtest/node-npmtest-htmllint/node_modules/htmllint/lib/rules/fig-req-figcaption.js":"var Issue = require('../issue');\n\nmodule.exports = {\n    name: 'fig-req-figcaption',\n    on: ['tag'],\n    filter: ['figure', 'figcaption']\n};\n\nmodule.exports.lint = function (ele, opts) {\n    if (!opts[this.name]) {\n        return [];\n    }\n\n    if (ele.name === 'figure') {\n        // get the children of this figure\n        var children = ele.children;\n\n        // check for a figcaption element\n        for (var i = 0; i < children.length; i++) {\n            if (children[i].name === 'figcaption') {\n                return [];\n            }\n        }\n    } else { // ele.name === 'figcaption'\n        if (ele.parent && ele.parent.name === 'figure'){\n            return [];\n        }\n    }\n    //return an issue\n    return new Issue('E032', ele.openLineCol);\n};\n","/home/travis/build/npmtest/node-npmtest-htmllint/node_modules/htmllint/lib/rules/focusable-tabindex-style.js":"var Issue = require('../issue');\n\nmodule.exports = {\n    name: 'focusable-tabindex-style',\n    on: ['tag'],\n    filter: ['a', 'area', 'button', 'input', 'img', 'select', 'textarea'],\n\n    detectedStyle: null\n};\n\nmodule.exports.end = function () {\n    this.detectedStyle = null;\n};\n\nmodule.exports.lint = function (element, opts) {\n    if (!opts[this.name] || this.isDisabled(element)) {\n        return [];\n    }\n\n    var tabIndexStyle = this.getTabIndexStyle(element);\n\n    if (this.detectedStyle !== null &&\n        this.detectedStyle !== tabIndexStyle) {\n\n        var msg = tabIndexStyle ? 'remove the tabindex'\n                                : 'add a positive tabindex';\n        return new Issue('E026', element.openLineCol, {op: msg});\n    }\n\n    this.detectedStyle = tabIndexStyle;\n    return [];\n};\n\nmodule.exports.isDisabled = function (element) {\n    return element.attribs && element.attribs.hasOwnProperty('disabled');\n};\n\nmodule.exports.getTabIndexStyle = function (element) {\n    var a = element.attribs;\n\n    if (a && a.hasOwnProperty('tabindex') && typeof a !== 'undefined') {\n        return a.tabindex.value > 0;\n    }\n\n    return false;\n};\n","/home/travis/build/npmtest/node-npmtest-htmllint/node_modules/htmllint/lib/rules/head-valid-content-model.js":"var Issue = require('../issue');\n\nmodule.exports = {\n    name: 'head-valid-content-model',\n    on: ['tag'],\n    filter: ['head']\n};\n\nmodule.exports.lint = function (elt, opts) {\n    if (!opts[this.name]) {\n        return [];\n    }\n\n    var legal_children = ['base', 'link', 'meta', 'noscript', 'script', 'style', 'template', 'title'];\n\n    return elt.children.filter(function (e) {\n        return e.type === 'tag' && legal_children.indexOf(e.name) < 0;\n    }).map(function(e) {\n        return new Issue('E047', e.openLineCol);\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-htmllint/node_modules/htmllint/lib/rules/href-style.js":"var Issue = require('../issue');\n\nmodule.exports = {\n    name: 'href-style',\n    on: ['tag'],\n    filter: ['a']\n};\n\nmodule.exports.lint = function (element, opts) {\n    var format = opts[this.name];\n    if (!format) {\n        return [];\n    }\n\n    // Should return an issue, since a without href is bad\n    if (!element.attribs || !element.attribs.hasOwnProperty('href')) {\n        return [];\n    }\n\n    // Link must be absolute iff specified format is absolute\n    return ((format === 'absolute') ===\n        (element.attribs.href.value.search('://') !== -1)) ? [] :\n        new Issue('E009', element.openLineCol, { format: format });\n};\n","/home/travis/build/npmtest/node-npmtest-htmllint/node_modules/htmllint/lib/rules/html-valid-content-model.js":"var Issue = require('../issue');\n\nmodule.exports = {\n    name: 'html-valid-content-model',\n    on: ['tag'],\n    filter: ['html']\n};\n\nmodule.exports.lint = function (elt, opts) {\n    if (!opts[this.name]) {\n        return [];\n    }\n\n    var output = [],\n        has_head = false,\n        has_body = false;\n\n    elt.children.forEach(function (e) {\n        if (e.type !== 'tag') {\n            return;\n        }\n        // E044: Illegal element\n        // E045: Duplicated tag\n        // E046: Head and body tags out of order\n        var err;\n        if (e.name === 'head') {\n            err = has_body ? 'E046' : has_head ? 'E045' : false;\n            has_head = true;\n        } else if (e.name === 'body') {\n            err = has_body ? 'E045' : false;\n            has_body = true;\n        } else {\n            err = 'E044';\n        }\n        if (err) {\n            output.push(new Issue(err, e.openLineCol));\n        }\n    });\n\n    return output;\n};\n","/home/travis/build/npmtest/node-npmtest-htmllint/node_modules/htmllint/lib/rules/id-class-no-ad.js":"var Issue = require('../issue');\n\nmodule.exports = {\n    name: 'id-class-no-ad',\n    on: ['attr'],\n    filter: ['id', 'class']\n};\n\nmodule.exports.lint = function (attr, opts) {\n    if (!opts[this.name]) {\n        return [];\n    }\n\n    var match = /(^|[^a-zA-Z0-9])ad([^a-zA-Z0-9]|$)/.exec(attr.value);\n    if (!match) {\n        return [];\n    }\n\n    return new Issue('E010', attr.valueLineCol);\n};\n","/home/travis/build/npmtest/node-npmtest-htmllint/node_modules/htmllint/lib/rules/id-no-dup.js":"var Issue = require('../issue');\n\nmodule.exports = {\n    name: 'id-no-dup',\n    table: {},\n    on: ['tag']\n};\n\nmodule.exports.end = function () {\n    // wipe previous table\n    this.table = {};\n};\n\nmodule.exports.lint = function (element, opts) {\n    if (!opts[this.name]) {\n        return [];\n    }\n\n    // don't process the element if it doesn't have an id\n    if (!element.attribs.hasOwnProperty('id')) {\n        return [];\n    }\n\n    var id = element.attribs.id;\n\n    // if we haven't seen the id before, remember it\n    // and pass the element\n    if (!this.table.hasOwnProperty(id.value)) {\n        this.table[id.value] = element;\n        return [];\n    }\n\n    // element has a duplicate id\n    return new Issue('E012', id.valueLineCol, { id: id.value });\n};\n","/home/travis/build/npmtest/node-npmtest-htmllint/node_modules/htmllint/lib/rules/id-style.js":"var knife = require('../knife'),\n    Issue = require('../issue');\n\nmodule.exports = {\n    name: 'id-style',\n    on: ['attr'],\n    filter: ['id']\n};\n\nmodule.exports.lint = function (attr, opts) {\n    var format = opts['id-class-style'];\n    if (!format) {\n        return [];\n    }\n\n    var v = attr.value;\n\n    var ignore = opts['id-class-ignore-regex'];\n    if (ignore !== false && (new RegExp(ignore)).test(v)) { return []; }\n\n    var verify = knife.getFormatTest(format);\n    if (verify(v)) { return []; }\n\n    return new Issue('E011', attr.valueLineCol, { format: format, id: v });\n};\n","/home/travis/build/npmtest/node-npmtest-htmllint/node_modules/htmllint/lib/rules/img-req-alt.js":"var knife = require('../knife'),\n    Issue = require('../issue');\n\nmodule.exports = {\n    name: 'img-req-alt',\n    on: ['tag'],\n    filter: ['img']\n};\n\nmodule.exports.lint = function (element, opts) {\n    var opt = opts[this.name];\n    if (!opt || knife.hasNonEmptyAttr(element, 'alt', opt === 'allownull')) {\n        return [];\n    }\n\n    return new Issue('E013', element.openLineCol);\n};\n","/home/travis/build/npmtest/node-npmtest-htmllint/node_modules/htmllint/lib/rules/img-req-src.js":"var knife = require('../knife'),\n    Issue = require('../issue');\n\nmodule.exports = {\n    name: 'img-req-src',\n    on: ['tag'],\n    filter: ['img']\n};\n\nmodule.exports.lint = function (element, opts) {\n    if (!opts[this.name] || knife.hasNonEmptyAttr(element, 'src')) {\n        return [];\n    }\n\n    return new Issue('E014', element.openLineCol);\n};\n","/home/travis/build/npmtest/node-npmtest-htmllint/node_modules/htmllint/lib/rules/indent-style.js":"var Issue = require('../issue');\n\nmodule.exports = {\n    name: 'indent-style',\n    on: ['line']\n};\n\nmodule.exports.end = function () {\n    delete this.current;\n};\n\nmodule.exports.lint = function (line, opts) {\n    // The indent, that is, the whitespace characters before the first\n    // non-whitespace character.\n    var matches = /[^ \\t]/.exec(line.line);\n    var sliceEnd = matches !== null ? matches.index : line.line.length;\n    var indent = line.line.slice(0, sliceEnd);\n\n    // if there are no tabs or spaces on this line, don't bother\n    if (indent.length === 0) {\n        return [];\n    }\n\n    var output = [];\n\n    var width = opts['indent-width'];\n    if (width) {\n        var i, l = 0;\n        for (i = 0; i < indent.length; i++) {\n            var c = indent[i];\n            if (c === ' ') {\n                l++;\n            } else {\n                if (l % width !== 0) { break; }\n                l = 0;\n            }\n        }\n\n        if (l % width !== 0 && !(opts['indent-width-cont'] &&\n                                 line.line[indent.length] !== '<')) {\n            output.push(new Issue('E036', [line.row, i - l + 1],\n                                    { width: width }));\n        }\n    }\n\n    var format = opts['indent-style'];\n    if (format) {\n        var space = / /.exec(indent);\n        var tab  = /\\t/.exec(indent);\n\n        if (!this.current) {\n            this.current = space ? 'spaces' : 'tabs';\n        }\n\n        // true if we require spaces, false if we require tabs\n        var type = ((format === 'spaces') ||\n                    (format === 'nonmixed' && this.current === 'spaces'));\n        var error = type ? tab : space;\n\n        if (error) {\n            output.push(new Issue('E024', [line.row, error.index + 1],\n                                    { type: type ? 'Tabs' : 'Spaces' }));\n        }\n    }\n\n    return output;\n};\n","/home/travis/build/npmtest/node-npmtest-htmllint/node_modules/htmllint/lib/rules/input-radio-req-name.js":"var knife = require('../knife'),\n    Issue = require('../issue');\n\nmodule.exports = {\n    name: 'input-radio-req-name',\n    labels: {},\n    inputsInfo: [],\n    on: ['tag'],\n    filter: ['input']\n};\n\nmodule.exports.lint = function (element, opts) {\n    if (!opts[this.name]) {\n        return [];\n    }\n\n    // if it's not a radio-type input, ignore it\n    var a = element.attribs;\n    if (!(a.type && a.type.value === 'radio')) {\n        return [];\n    }\n\n    if (knife.hasNonEmptyAttr(element, 'name')) {\n        return [];\n    }\n\n    return new Issue('E034', element.openLineCol);\n};\n","/home/travis/build/npmtest/node-npmtest-htmllint/node_modules/htmllint/lib/rules/input-req-label.js":"var Issue = require('../issue');\n\nmodule.exports = {\n    name: 'input-req-label',\n    labels: {},\n    inputsInfo: [],\n    on: ['tag'],\n    filter: ['input', 'label']\n};\n\nmodule.exports.end = function () {\n    var issues = [];\n    if (this.inputsInfo.length > 0) {\n        this.inputsInfo.forEach(function (input) {\n            if (!this.labels[input.id] && !this.labels[input.name]) {\n                issues.push(new Issue('E033', input.location, {\n                    'idValue': input.id,\n                    'nameValue': input.name\n                }));\n            }\n        }.bind(this));\n    }\n\n    // wipe previous table\n    this.labels = {};\n    this.inputsInfo = [];\n\n    return issues;\n};\n\nmodule.exports.lint = function (element, opts) {\n    if (!opts[this.name]) {\n        return [];\n    }\n\n    // if it's a label with a 'for', store that value\n    if (element.name === 'label') {\n        if (element.attribs.hasOwnProperty('for')) {\n            this.labels[element.attribs.for.value] = element;\n        }\n        return [];\n    }\n\n    // if it's not a text-type input, ignore it\n    if (!(element.attribs.hasOwnProperty('type')) || !(element.attribs.type.value === 'text' || element.attribs.type.value === 'radio')) {\n        return [];\n    }\n    var type = element.attribs.type.value;\n\n    // check if the input has a label as a parent.\n    var parent = element.parent;\n    while (parent !== null) {\n        if (parent.name === 'label') {\n            return [];\n        }\n        parent = parent.parent;\n    }\n\n    // check if the input has a named label, by storing the values to check at the end.\n    var id = (element.attribs.hasOwnProperty('id') && element.attribs.id) ? element.attribs.id.value : null;\n    var name = (element.attribs.hasOwnProperty('name') && element.attribs.name && (type === 'text')) ? element.attribs.name.value : null;\n    if (id || name) {\n        this.inputsInfo.push({\n            'id': id,\n            'name': name,\n            'location': element.openLineCol\n        });\n    } else {\n        return new Issue('E033', element.openLineCol, {\n            'idValue': 'null',\n            'nameValue': 'null'\n        });\n    }\n\n    return [];\n};","/home/travis/build/npmtest/node-npmtest-htmllint/node_modules/htmllint/lib/rules/label-req-for.js":"var lodash = require('lodash');\nvar knife = require('../knife'),\n    Issue = require('../issue');\n\nmodule.exports = {\n    name: 'label-req-for',\n    filter: ['label'],\n    on: ['tag'],\n\n    idmap: null\n};\n\nmodule.exports.end = function () {\n    this.idmap = null;\n};\n\nmodule.exports.lint = function (ele, opts) {\n    if (!opts[this.name]) {\n        return [];\n    }\n\n    // whether or not all labels MUST have a for attr,\n    // regardless of whether the label has children\n    var strict = (opts[this.name] === 'strict'),\n        hasFor = ele.attribs.hasOwnProperty('for');\n\n    if (strict && !hasFor) {\n        return new Issue('E019', ele.openLineCol);\n    } else if (!strict && !hasFor && !this.hasValidChild(ele)) {\n        return new Issue('E020', ele.openLineCol);\n    }\n\n    if (hasFor) {\n        if (!this.idmap) {\n            this.buildIdMap(ele);\n        }\n\n        var id = ele.attribs['for'].value,\n            forElement = this.idmap[id];\n\n        if (!forElement) {\n            // the paired element does not exist\n            return new Issue('E021', ele.openLineCol, { id: id });\n        } else if (!knife.isLabeable(forElement)) {\n            return new Issue('E022', ele.openLineCol, { id: id });\n        }\n    }\n\n    return [];\n};\n\nmodule.exports.buildIdMap = function (originElement) {\n    var rElem = originElement;\n    while (rElem.parent !== null) {\n        rElem = rElem.parent;\n    }\n    while (rElem.prev !== null) {\n        rElem = rElem.prev;\n    }\n\n    var roots = [];\n    while (rElem !== null) {\n        roots.push(rElem);\n        rElem = rElem.next;\n    }\n\n    var idmap = {};\n\n    roots.forEach(function iterateElements(element) {\n        if (element.attribs && element.attribs.id) {\n            var id = element.attribs.id.value;\n\n            if (!idmap.hasOwnProperty(id)) {\n                idmap[id] = element;\n            }\n        }\n\n        if (element.children) {\n            element.children.forEach(iterateElements);\n        }\n    });\n\n    this.idmap = idmap;\n};\n\nmodule.exports.hasValidChild = function (ele) {\n    // test for any element to be labeable\n    return lodash.some(ele.children, knife.isLabeable);\n};\n","/home/travis/build/npmtest/node-npmtest-htmllint/node_modules/htmllint/lib/rules/lang.js":"var Issue = require('../issue'),\n    knife = require('../knife');\n\nmodule.exports = {\n    name: 'lang',\n    on: ['tag'],\n    filter: ['html']\n};\n\nmodule.exports.lint = function (element, opts) {\n    var a = element.attribs;\n    if (a && a.hasOwnProperty('lang')) {\n        var l = a.lang.value;\n        if (opts['lang-style']) {\n            var valid = knife.checkLangTag(l);\n            if (valid === 1) {\n                return new Issue('E038', a.lang.valueLineCol, {lang:l});\n            }\n            if (opts['lang-style'] === 'case' && valid === 2) {\n                return new Issue('E039', a.lang.valueLineCol, {lang:l});\n            }\n        }\n        return [];\n    }\n\n    return opts['html-req-lang'] ?\n        new Issue('E025', element.openLineCol) : [];\n};\n","/home/travis/build/npmtest/node-npmtest-htmllint/node_modules/htmllint/lib/rules/line-end-style.js":"var Issue = require('../issue');\n\nmodule.exports = {\n    name: 'line-end-style',\n    on: ['line']\n};\n\nmodule.exports.lint = function (line, opts) {\n    var format = opts[this.name];\n    if (!format) {\n        return [];\n    }\n\n    format = format.toLowerCase();\n    var regex = {\n        cr:   /(^|[^\\n\\r])\\r$/,\n        lf:   /(^|[^\\n\\r])\\n$/,\n        crlf: /(^|[^\\n\\r])\\r\\n$/\n    }[format];\n\n    if (regex.test(line.line)) {\n        return [];\n    }\n\n    var len = line.line.length,\n        pos = [line.row, len];\n\n    if (line.line[len - 2] === '\\r') {\n        pos[1] -= 1;\n    }\n\n    return new Issue('E015', pos, { format: format });\n};\n","/home/travis/build/npmtest/node-npmtest-htmllint/node_modules/htmllint/lib/rules/line-max-len.js":"var Issue = require('../issue');\n\nmodule.exports = {\n  name: 'line-max-len',\n  on: ['line']\n};\n\nmodule.exports.lint = function (line, opts) {\n  var maxLength = opts[this.name];\n  var ignoreRegExpString = opts[this.name + '-ignore-regex'];\n  var lineText;\n  var len;\n  var pos;\n\n  if (!maxLength) {\n    return [];\n  }\n\n  lineText = line.line.replace(/(\\r\\n|\\n|\\r)$/, '');\n\n  if (ignoreRegExpString && (new RegExp(ignoreRegExpString, 'g')).test(lineText)) {\n    return [];\n  }\n\n  len = lineText.length;\n\n  if (len <= maxLength) {\n    return [];\n  }\n\n  pos = [line.row, len];\n\n  return new Issue('E040', pos, { maxlength: maxLength, length: len });\n};\n","/home/travis/build/npmtest/node-npmtest-htmllint/node_modules/htmllint/lib/rules/line.js":"var lodash = require('lodash'),\n    knife = require('../knife');\n\nmodule.exports = {\n    name: 'line'\n};\n\nmodule.exports.lint = function(lines, opts, inlineConfigs) {\n    lines[0] = '';\n    var subs = this.subscribers;\n    // use the opts as our base, and build from them.\n    inlineConfigs.reset(opts);\n    return lodash.flattenDeep(lines.map(function (line, index) {\n        /*\n         * Right now, if the config is on a line, that whole line is\n         * given the new configuration. This is not great in theory,\n         * but in practice line rules don't really need the split.\n         */\n        inlineConfigs.getOptsAtIndex(line.index);\n\n        if (index === 0) { return []; }\n        return knife.applyRules(subs, line, inlineConfigs.current);\n    }));\n};\n","/home/travis/build/npmtest/node-npmtest-htmllint/node_modules/htmllint/lib/rules/page-title.js":"var Issue = require('../issue');\n\nmodule.exports = {\n    name: 'page-title',\n    on: ['tag'],\n    filter: ['head']\n};\n\nmodule.exports.lint = function (elt, opts) {\n    var output = [];\n    var titles = elt.children.filter(function (e) {\n        return e.type === 'tag' && e.name === 'title';\n    });\n    if (opts['head-req-title'] &&\n            !titles.some(function(t){return t.children.length > 0;})) {\n        output.push(new Issue('E027', elt.openLineCol));\n    }\n    if (opts['title-no-dup'] && titles.length > 1) {\n        output.push(new Issue('E028', titles[1].openLineCol,\n            { num: titles.length }));\n    }\n\n    var maxlen = opts['title-max-len'];\n    if (maxlen) { titles.map(function(t) {\n        var text = t.children.filter(function(c) {return c.type === 'text';})\n            .map(function(c) { return c.data; }).join('');\n        if (text.length > maxlen) {\n            output.push(new Issue('E029', t.openLineCol,\n                { title: text, maxlength: maxlen }));\n        }\n    }); }\n\n    return output;\n};\n","/home/travis/build/npmtest/node-npmtest-htmllint/node_modules/htmllint/lib/rules/spec-char-escape.js":"var knife = require('../knife'),\n    Issue = require('../issue');\n\nmodule.exports = {\n    name: 'spec-char-escape',\n    on: ['dom'],\n    filter: ['text', 'tag']\n};\n\nvar regex = {\n    improper: /(&[^a-zA-Z0-9#;]*;)/gm, // checks for properly formed escapes with improper characters inside them\n    brackets: /[<>]/gm, // checks for > and <\n    unescaped: /(&[a-zA-Z0-9#]*[^a-zA-Z0-9#;])/gm // checks for not forming an escape sequence properly\n};\n\nfunction executeRegex(regexLine, text) {\n    return regexLine.exec(text) || false;\n}\n\nmodule.exports.lint = function (element, opts) {\n    // if not enabled, get outta here!\n    if (!opts[this.name]) {\n        return [];\n    }\n\n    var issues = [],\n        lineColFunc = null;\n\n    // if it's text - make sure it only has alphanumericals. If it has a &, a ; should follow.\n    if (['text'].indexOf(element.type) > -1 && element.data.length > 0) {\n        lineColFunc = knife.getLineColFunc(element.data, element.openLineCol);\n        [regex.improper, regex.brackets, regex.unescaped].forEach(function (currentRegex) {\n            var match = executeRegex(currentRegex, element.data);\n            while (match) {\n                var lineCol = lineColFunc(match.index);\n                issues.push(new Issue('E023', lineCol, {\n                    chars: match[1],\n                    part: 'text'\n                }));\n                match = executeRegex(currentRegex, element.data);\n            }\n        });\n    }\n\n    if (element.attribs) {\n        var attributeNames = Object.keys(element.attribs);\n\n        for (var index = 0; index < attributeNames.length; index++) {\n            var valueObject = element.attribs[attributeNames[index]];\n            lineColFunc = knife.getLineColFunc(valueObject.value, valueObject.valueLineCol);\n            [regex.improper, regex.brackets, regex.unescaped].forEach(function (currentRegex) {\n                var match = executeRegex(currentRegex, valueObject.value);\n                while (match) {\n                    var lineCol = lineColFunc(match.index);\n                    issues.push(new Issue('E023', lineCol, {\n                        chars: match[1],\n                        part: 'attribute value'\n                    }));\n                    match = executeRegex(currentRegex, element.data);\n                }\n            });\n        }\n    }\n    return issues;\n};\n","/home/travis/build/npmtest/node-npmtest-htmllint/node_modules/htmllint/lib/rules/table-req-caption.js":"var Issue = require('../issue');\n\nmodule.exports = {\n    name: 'table-req-caption',\n    on: ['tag'],\n    filter: ['table']\n};\n\nmodule.exports.lint = function (ele, opts) {\n    if (!opts[this.name]) {\n        return [];\n    }\n\n    // get the children of this element\n    var children = ele.children;\n\n    // check for a caption element\n    for (var i = 0; i < children.length; i++) {\n        if (children[i].name === 'caption')\n        {\n            return [];\n        }\n    }\n    //return an issue\n    return new Issue('E031', ele.openLineCol);\n};\n","/home/travis/build/npmtest/node-npmtest-htmllint/node_modules/htmllint/lib/rules/table-req-header.js":"var Issue = require('../issue');\n\nmodule.exports = {\n    name: 'table-req-header',\n    on: ['tag'],\n    filter: ['table']\n};\n\nmodule.exports.lint = function (ele, opts) {\n    if (!opts[this.name]) {\n        return [];\n    }\n\n    var children = ele.children;\n    var childIndex = 0;\n\n    //ffwd to first relevant table child\n    while (children[childIndex] && children[childIndex].name &&\n      (children[childIndex].name.match(/caption/i) ||\n       children[childIndex].name.match(/colgroup/i) ||\n       children[childIndex].name.match(/tfoot/i)\n       )) {\n        childIndex = childIndex + 1;\n    }\n\n    if (children[childIndex] && children[childIndex].name) {\n      if (children[childIndex].name.match(/thead/i)) {\n        return [];\n      }\n\n      if (children[childIndex].name.match(/tr/i) && children[childIndex].children[0].name.match(/th/i)) {\n        return [];\n      }\n    }\n\n    return new Issue('E035', ele.openLineCol);\n};\n","/home/travis/build/npmtest/node-npmtest-htmllint/node_modules/htmllint/lib/rules/tag-bans.js":"var Issue = require('../issue');\n\nmodule.exports = {\n    name: 'tag-bans',\n    on: ['dom'],\n    filter: ['tag', 'style', 'script']\n};\n\nmodule.exports.lint = function (element, opts) {\n    var format = opts[this.name];\n    if (!format || format.indexOf(element.name) < 0) {\n        return [];\n    }\n\n    return new Issue('E016', element.openLineCol, {\n        tag: element.name\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-htmllint/node_modules/htmllint/lib/rules/tag-close.js":"var knife = require('../knife'),\n    Issue = require('../issue');\n\nmodule.exports = {\n    name: 'tag-close',\n    on: ['tag']\n};\n\nmodule.exports.lint = function (element, opts) {\n    // If the tag did not close itself\n    if (!element.close ||\n        element.name.toLowerCase() !== element.close.toLowerCase()) {\n        if (knife.isVoidElement(element.name)) {\n            var selfClose = knife.isSelfClosing(element);\n            var style = opts['tag-self-close'];\n            if ((style == 'always' && !selfClose) ||\n                (style == 'never' && selfClose)) {\n                return new Issue('E018', element.openLineCol,\n                                 {expect: style});\n            }\n        } else {\n            if (opts['tag-close']) {\n                return new Issue('E042', element.openLineCol);\n            }\n        }\n    } else {\n        if (opts['tag-name-match'] && element.name !== element.close) {\n            return new Issue('E030', element.closeLineCol);\n        }\n    }\n\n    return [];\n};\n","/home/travis/build/npmtest/node-npmtest-htmllint/node_modules/htmllint/lib/rules/tag-name-lowercase.js":"var Issue = require('../issue');\n\nmodule.exports = {\n    name: 'tag-name-lowercase',\n    on: ['tag']\n};\n\nvar uppercaseMask = (/[A-Z]/);\n\nmodule.exports.lint = function (element, opts) {\n    if (!opts[this.name] || !uppercaseMask.test(element.name)) {\n        return [];\n    }\n\n    return new Issue('E017', element.openLineCol);\n};\n","/home/travis/build/npmtest/node-npmtest-htmllint/node_modules/htmllint/lib/rules/tag.js":"var knife = require('../knife');\n\nmodule.exports = {\n    name: 'tag',\n    on: ['dom'],\n    filter: ['tag']\n};\n\nmodule.exports.lint = function(element, opts) {\n    var matcher = knife.matchFilter.bind(knife, element.name);\n\n    var s = this.subscribers.filter(matcher);\n    return knife.applyRules(s, element, opts);\n};\n","/home/travis/build/npmtest/node-npmtest-htmllint/node_modules/htmllint/lib/messages.js":"var lodash = require('lodash');\n\nvar errors = {\n    E000: 'not a valid error code',\n    E001: 'the `<%= attribute %>` attribute is banned',\n    E002: 'attribute names must match the format: <%= format %>',\n    E003: 'duplicate attribute: <%= attribute %>',\n    E004: 'attribute values must not include unsafe characters',\n    E005: 'the `<%= attribute %>` attribute is not <%= format %>',\n    E006: 'attribute values cannot be empty',\n    E007: '<!DOCTYPE> should be the first element seen',\n    E008: 'the doctype must conform to the HTML5 standard',\n    E009: 'use only <%= format %> links',\n    E010: 'ids and classes may not use the word \"ad\"',\n    E011: 'value must match the format: <%= format %>',\n    E012: 'the id \"<%= id %>\" is already in use',\n    E013: 'the `alt` property must be set for image tags',\n    E014: 'a source must be given for each `img` tag',\n    E015: 'line ending does not match format: <%= format %>',\n    E016: 'the <%= tag %> tag is banned',\n    E017: 'tag names must be lowercase',\n    E018: 'void element should <%= expect %> close itself',\n    E019: 'all labels should have a `for` attribute',\n    E020: 'label does not have a `for` attribute or a labeable child',\n    E021: 'an element with the id \"<%= id %>\" does not exist (should match `for` attribute)',\n    E022: 'the linked element is not labeable (id: <%= id %>)',\n    E023: '<%= part %> contains improperly escaped characters: <%= chars %>',\n    E024: '<%= type %> not allowed',\n    E025: 'html element should specify the language of the page',\n    E026: '<%= op %> (all focusable elements on a page must either have a positive tabindex or none at all)',\n    E027: 'the <head> tag must contain a title',\n    E028: 'the <head> tag can only contain one title; <%= num %> given',\n    E029: 'title \"<%= title %>\" exceeds maximum length of <%= maxlength %>',\n    E030: 'tag start and end must match',\n    E031: 'table must have a caption for accessibility',\n    E032: 'figure must have a figcaption, figcaption must be in a figure (for accessibility)',\n    E033: 'input with id: <%= idValue %> (or if type is text, name: <%= nameValue %>) is not associated with a label for accessibility',\n    E034: 'radio input must have an associated name',\n    E035: 'table must have a header for accessibility',\n    E036: 'indenting spaces must be used in groups of <%= width %>',\n    E037: 'attributes for one tag on the one line should be limited to <%= limit %>',\n    E038: 'lang attribute <%= lang %> is not valid',\n    E039: 'lang attribute <%= lang %> in not properly capitalized',\n    E040: 'line length should not exceed <%= maxlength %> characters (current: <%= length %>)',\n    E041: 'duplicate class: <%= classes %>',\n    E042: 'tag is not closed',\n    E043: 'attribute <%= attribute => should come before <%= previous =>',\n    E044: 'only <head> and <body> may be children of <html>',\n    E045: 'tags in <html> may not be duplicated',\n    E046: '<head> tag must come before <body> in <html>',\n    E047: 'the only tags allowed in the <head> are base, link, meta, noscript, script, style, template, and title'\n};\n\nmodule.exports.errors = {};\n\nlodash.forOwn(errors, function (format, code) {\n    module.exports.errors[code] = {\n        format: format,\n        code: code\n    };\n});\n\nmodule.exports.renderMsg = function (code, data) {\n    var format = errors[code];\n\n    return lodash.template(format)(data);\n};\n\nmodule.exports.renderIssue = function (issue) {\n    return this.renderMsg(issue.code, issue.data);\n};\n","/home/travis/build/npmtest/node-npmtest-htmllint/node_modules/htmllint/gulpfile.js":"var gulp = require('gulp'),\n    coveralls = require('gulp-coveralls'),\n    eslint = require('gulp-eslint'),\n    jscs = require('gulp-jscs'),\n    istanbul = require('gulp-istanbul'),\n    mocha = require('gulp-mocha'),\n    publish = require('gulp-gh-pages');\n\nvar paths = {\n    src: ['./lib/**/*.js'],\n    testUnit: './test/unit/*.js',\n    testFunc: './test/functional/*.js',\n    site: ['./site/**/*']\n};\npaths.test = [].concat(paths.testUnit, paths.testFunc);\n\ngulp.task('jscs', function () {\n    gulp.src(paths.src\n             .concat(paths.test))\n        .pipe(jscs());\n});\n\n// lints javascript files with eslint\n// edit .eslintrc for configuration\ngulp.task('lint', ['jscs'], function () {\n    return gulp.src(paths.src\n             .concat(paths.test)\n             .concat('./gulpfile.js'))\n        .pipe(eslint())\n        .pipe(eslint.format());\n});\n\n// instruments js source code for coverage reporting\ngulp.task('istanbul', function (done) {\n    gulp.src(paths.src)\n        .pipe(istanbul())\n        .pipe(istanbul.hookRequire())\n        .on('finish', done);\n});\n\n// runs mocha tests\ngulp.task('test', ['istanbul'], function (done) {\n    // expose globals here for now\n    // move these into their own file if they grow\n    global.chai = require('chai');\n    global.chai.use(require('chai-as-promised'));\n    global.expect = global.chai.expect;\n\n    gulp.src(paths.test, {read:false})\n        .pipe(mocha({\n            reporter: 'list'\n        }))\n        .pipe(istanbul.writeReports())\n        .on('end', done);\n});\n\n// plato report\n// TODO: think bout this a bit more\ngulp.task('plato', function () {\n    var plato = require('plato');\n    gulp.src(paths.src)\n        .pipe(plato('report', {}));\n});\n\n// jsdoc generation\ngulp.task('jsdoc', function () {\n    var jsdoc = require('gulp-jsdoc');\n    gulp.src(paths.src.concat('README.md'))\n        .pipe(jsdoc.parser({\n            plugins: [\n                'plugins/escapeHtml',\n                'plugins/markdown'\n            ],\n            markdown: {\n                parser: 'gfm',\n                githubRepoOwner: 'htmllint',\n                githubRepoName: 'htmllint'\n            }\n        }))\n        .pipe(jsdoc.generator('./site/api', {\n            // template\n            path: 'ink-docstrap',\n            theme: 'cerulean',\n            systemName: 'htmllint',\n            navType: 'vertical',\n            linenums: true,\n            inverseNav: true,\n            outputSourceFiles: true\n        }));\n});\n\ngulp.task('doc:gen', ['jsdoc']);\n\ngulp.task('doc:pub', ['doc:gen'], function () {\n    gulp.src(paths.site)\n        .pipe(publish({\n            cacheDir: '.tmp'\n        }));\n});\n\n// runs on travis ci (lints, tests, and uploads to coveralls)\ngulp.task('travis', ['lint', 'test'], function () {\n    gulp.src('coverage/**/lcov.info')\n        .pipe(coveralls());\n});\n\ngulp.task('default', [\n    'lint',\n    'test'\n]);\n","/home/travis/build/npmtest/node-npmtest-htmllint/node_modules/htmllint/repl.js":"#!/usr/bin/env node\n\nvar repl = require('repl');\nvar ctx = repl.start('>> ').context;\n\nvar htmllint = require('./');\n\n// export stuff to use in the repl\nctx.htmllint = htmllint;\n\nctx.lint = function () {\n    var promise = ctx.htmllint.apply(ctx.htmllint, arguments);\n\n    function handler(result) {\n        ctx['_'] = result;\n\n        console.log(result);\n        console.log('You can access the results in the \"_\" obj');\n    }\n\n    promise.then(handler, handler);\n};\n\n\nvar parser = ctx.htmllint.defaultLinter.parser;\nctx.parse = parser.parse.bind(parser);\n"}